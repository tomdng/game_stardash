// WARNING: Here be Dragons
// This file is generated by Creer, do not modify it
// It basically sets up all the classes, interfaces, types, and what-not that
// we need for TypeScript to know the base classes, while allowing for minimal
// code for developers to be forced to fill out.

// tslint:disable:max-classes-per-file
// ^ because we need to build a bunch of base class wrappers here

// base game classes
import { BaseAI, BaseGame, BaseGameManager, BaseGameObject,
         BaseGameObjectFactory, BaseGameSettingsManager, BasePlayer,
         makeNamespace } from "~/core/game";

// mixins
import { ITiledPlayer, ITurnBasedPlayer, ITwoPlayerPlayer, mixTiled,
         mixTurnBased, mixTwoPlayer } from "~/core/game/mixins";

// extract game object constructor args
import { FirstArgumentFromConstructor } from "~/utils";

/**
 * The interface the Player for the Pirates game
 * must implement from mixed in game logic.
 */
export interface IBasePiratesPlayer extends
    BasePlayer,
    ITwoPlayerPlayer,
    ITurnBasedPlayer,
    ITiledPlayer {
}

const base0 = {
    AI: BaseAI,
    Game: BaseGame,
    GameManager: BaseGameManager,
    GameObject: BaseGameObject,
    GameSettings: BaseGameSettingsManager,
};

const base1 = mixTwoPlayer(base0);
const base2 = mixTurnBased(base1);
const base3 = mixTiled(base2);

const mixed = base3;

/** The base AI class for the Pirates game will mixin logic. */
class BasePiratesAI extends mixed.AI {}

/** The base Game class for the Pirates game will mixin logic. */
class BasePiratesGame extends mixed.Game {}

/** The base GameManager class for the Pirates game will mixin logic. */
class BasePiratesGameManager extends mixed.GameManager {}

/** The base GameObject class for the Pirates game will mixin logic. */
class BasePiratesGameObject extends mixed.GameObject {}

/** The base GameSettings class for the Pirates game will mixin logic. */
class BasePiratesGameSettings extends mixed.GameSettings {}

/** The Base classes that game classes build off of. */
export const BaseClasses = {
    AI: BasePiratesAI,
    Game: BasePiratesGame,
    GameManager: BasePiratesGameManager,
    GameObject: BasePiratesGameObject,
    GameSettings: BasePiratesGameSettings,
};

// Now all the base classes are created;
// so we can start importing/exporting the classes that need them.

/** All the possible properties for an GameObject. */
export interface IGameObjectProperties {
}

/** All the possible properties for an Player. */
export interface IPlayerProperties {
    /**
     * What type of client this is, e.g. 'Python', 'JavaScript', or some other
     * language. For potential data mining purposes.
     */
    clientType?: string;

    /**
     * The amount of gold this Player has in reserve.
     */
    gold?: number;

    /**
     * The amount of infamy this Player has.
     */
    infamy?: number;

    /**
     * If the player lost the game or not.
     */
    lost?: boolean;

    /**
     * The name of the player.
     */
    name?: string;

    /**
     * This player's opponent in the game.
     */
    opponent?: Player;

    /**
     * The Port owned by this Player.
     */
    port?: Port;

    /**
     * The reason why the player lost the game.
     */
    reasonLost?: string;

    /**
     * The reason why the player won the game.
     */
    reasonWon?: string;

    /**
     * The amount of time (in ns) remaining for this AI to send commands.
     */
    timeRemaining?: number;

    /**
     * Every Unit owned by this Player.
     */
    units?: Unit[];

    /**
     * If the player won the game or not.
     */
    won?: boolean;

}

/** All the possible properties for an Port. */
export interface IPortProperties {
    /**
     * For players, how much more gold this Port can spend this turn. For
     * merchants, how much gold this Port has accumulated (it will spawn a ship
     * when the Port can afford one).
     */
    gold?: number;

    /**
     * (Merchants only) How much gold was invested into this Port. Investment
     * determines the strength and value of the next ship.
     */
    investment?: number;

    /**
     * The owner of this Port, or undefined if owned by merchants.
     */
    owner?: Player;

    /**
     * The Tile this Port is on.
     */
    tile?: Tile;

}

/**
 * Argument overrides for Port's spawn function. If you return an object of
 * this interface from the invalidate functions, the value(s) you set will be
 * used in the actual function.
 */
export interface IPortSpawnArgs {
    /**
     * What type of Unit to create ('crew' or 'ship').
     */
    type?: "crew" | "ship";
}

/** All the possible properties for an Tile. */
export interface ITileProperties {
    /**
     * (Visualizer only) Whether this tile is deep sea or grassy. This has no
     * effect on gameplay, but feel free to use it if you want.
     */
    decoration?: boolean;

    /**
     * The amount of gold buried on this tile.
     */
    gold?: number;

    /**
     * The Port on this Tile if present, otherwise undefined.
     */
    port?: Port;

    /**
     * The Tile to the 'East' of this one (x+1, y). Undefined if out of bounds
     * of the map.
     */
    tileEast?: Tile;

    /**
     * The Tile to the 'North' of this one (x, y-1). Undefined if out of bounds
     * of the map.
     */
    tileNorth?: Tile;

    /**
     * The Tile to the 'South' of this one (x, y+1). Undefined if out of bounds
     * of the map.
     */
    tileSouth?: Tile;

    /**
     * The Tile to the 'West' of this one (x-1, y). Undefined if out of bounds
     * of the map.
     */
    tileWest?: Tile;

    /**
     * The type of Tile this is ('water' or 'land').
     */
    type?: "water" | "land";

    /**
     * The Unit on this Tile if present, otherwise undefined.
     */
    unit?: Unit;

    /**
     * The x (horizontal) position of this Tile.
     */
    x?: number;

    /**
     * The y (vertical) position of this Tile.
     */
    y?: number;

}

/** All the possible properties for an Unit. */
export interface IUnitProperties {
    /**
     * Whether this Unit has performed its action this turn.
     */
    acted?: boolean;

    /**
     * How many crew are on this Tile. This number will always be <=
     * crewHealth.
     */
    crew?: number;

    /**
     * How much total health the crew on this Tile have.
     */
    crewHealth?: number;

    /**
     * How much gold this Unit is carrying.
     */
    gold?: number;

    /**
     * How many more times this Unit may move this turn.
     */
    moves?: number;

    /**
     * The Player that owns and can control this Unit, or undefined if the Unit
     * is neutral.
     */
    owner?: Player;

    /**
     * (Merchants only) The path this Unit will follow. The first element is
     * the Tile this Unit will move to next.
     */
    path?: Tile[];

    /**
     * If a ship is on this Tile, how much health it has remaining. 0 for no
     * ship.
     */
    shipHealth?: number;

    /**
     * (Merchants only) The number of turns this merchant ship won't be able to
     * move. They will still attack. Merchant ships are stunned when they're
     * attacked.
     */
    stunTurns?: number;

    /**
     * (Merchants only) The Port this Unit is moving to.
     */
    targetPort?: Port;

    /**
     * The Tile this Unit is on.
     */
    tile?: Tile;

}

/**
 * Argument overrides for Unit's attack function. If you return an object of
 * this interface from the invalidate functions, the value(s) you set will be
 * used in the actual function.
 */
export interface IUnitAttackArgs {
    /**
     * The Tile to attack.
     */
    tile?: Tile;
    /**
     * Whether to attack 'crew' or 'ship'. Crew deal damage to crew and ships
     * deal damage to ships. Consumes any remaining moves.
     */
    target?: "crew" | "ship";
}

/**
 * Argument overrides for Unit's bury function. If you return an object of this
 * interface from the invalidate functions, the value(s) you set will be used
 * in the actual function.
 */
export interface IUnitBuryArgs {
    /**
     * How much gold this Unit should bury. Amounts <= 0 will bury as much as
     * possible.
     */
    amount?: number;
}

/**
 * Argument overrides for Unit's deposit function. If you return an object of
 * this interface from the invalidate functions, the value(s) you set will be
 * used in the actual function.
 */
export interface IUnitDepositArgs {
    /**
     * The amount of gold to deposit. Amounts <= 0 will deposit all the gold on
     * this Unit.
     */
    amount?: number;
}

/**
 * Argument overrides for Unit's dig function. If you return an object of this
 * interface from the invalidate functions, the value(s) you set will be used
 * in the actual function.
 */
export interface IUnitDigArgs {
    /**
     * How much gold this Unit should take. Amounts <= 0 will dig up as much as
     * possible.
     */
    amount?: number;
}

/**
 * Argument overrides for Unit's move function. If you return an object of this
 * interface from the invalidate functions, the value(s) you set will be used
 * in the actual function.
 */
export interface IUnitMoveArgs {
    /**
     * The Tile this Unit should move to.
     */
    tile?: Tile;
}

/**
 * Argument overrides for Unit's rest function. If you return an object of this
 * interface from the invalidate functions, the value(s) you set will be used
 * in the actual function.
 */
export interface IUnitRestArgs {
}

/**
 * Argument overrides for Unit's split function. If you return an object of
 * this interface from the invalidate functions, the value(s) you set will be
 * used in the actual function.
 */
export interface IUnitSplitArgs {
    /**
     * The Tile to move the crew to.
     */
    tile?: Tile;
    /**
     * The number of crew to move onto that Tile. Amount <= 0 will move all the
     * crew to that Tile.
     */
    amount?: number;
    /**
     * The amount of gold the crew should take with them. Gold < 0 will move
     * all the gold to that Tile.
     */
    gold?: number;
}

/**
 * Argument overrides for Unit's withdraw function. If you return an object of
 * this interface from the invalidate functions, the value(s) you set will be
 * used in the actual function.
 */
export interface IUnitWithdrawArgs {
    /**
     * The amount of gold to withdraw. Amounts <= 0 will withdraw everything.
     */
    amount?: number;
}

export * from "./game-object";
export * from "./player";
export * from "./port";
export * from "./tile";
export * from "./unit";
export * from "./game";
export * from "./game-manager";
export * from "./ai";

import { GameObject } from "./game-object";
import { Player } from "./player";
import { Port } from "./port";
import { Tile } from "./tile";
import { Unit } from "./unit";

import { AI } from "./ai";
import { PiratesGame } from "./game";
import { PiratesGameManager } from "./game-manager";
import { PiratesGameSettingsManager } from "./game-settings";

/** The arguments used to construct a Port */
export type PortArgs = FirstArgumentFromConstructor<typeof Port>;

/** The arguments used to construct a Tile */
export type TileArgs = FirstArgumentFromConstructor<typeof Tile>;

/** The arguments used to construct a Unit */
export type UnitArgs = FirstArgumentFromConstructor<typeof Unit>;

/**
 * The factory that **must** be used to create any game objects in
 * the Pirates game.
 */
export class PiratesGameObjectFactory extends BaseGameObjectFactory {
    /**
     * Creates a new Port in the Game and tracks it for all players.
     *
     * @param args - Data about the Port to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Port hooked up in the game and ready for you to use.
     */
    public port<T extends PortArgs>(
        args: Readonly<T>,
    ): Port & T {
        return this.createGameObject("Port", Port, args);
    }

    /**
     * Creates a new Tile in the Game and tracks it for all players.
     *
     * @param args - Data about the Tile to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Tile hooked up in the game and ready for you to use.
     */
    public tile<T extends TileArgs>(
        args: Readonly<T>,
    ): Tile & T {
        return this.createGameObject("Tile", Tile, args);
    }

    /**
     * Creates a new Unit in the Game and tracks it for all players.
     *
     * @param args - Data about the Unit to set. Any keys matching a property
     * in the game object's class will be automatically set for you.
     * @returns A new Unit hooked up in the game and ready for you to use.
     */
    public unit<T extends UnitArgs>(
        args: Readonly<T>,
    ): Unit & T {
        return this.createGameObject("Unit", Unit, args);
    }

}

/**
 * The shared namespace for Pirates that is used to
 * initialize each game instance.
 */
export const Namespace = makeNamespace({
    AI,
    Game: PiratesGame,
    GameManager: PiratesGameManager,
    GameObjectFactory: PiratesGameObjectFactory,
    GameSettingsManager: PiratesGameSettingsManager,
    Player,

    // These are generated metadata that allow delta-merging values from
    // clients.
    // They are never intended to be directly interfaced with outside of the
    // Cerveau core developers.
    gameName: "Pirates",
    gameSettingsManager: new PiratesGameSettingsManager(),
    gameObjectsSchema: {
        AI: {
            attributes: {
            },
            functions: {
                runTurn: {
                    args: [
                    ],
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Game: {
            attributes: {
                buryInterestRate: {
                    typeName: "float",
                },
                crewCost: {
                    typeName: "int",
                },
                crewDamage: {
                    typeName: "int",
                },
                crewHealth: {
                    typeName: "int",
                },
                crewMoves: {
                    typeName: "int",
                },
                crewRange: {
                    typeName: "float",
                },
                currentPlayer: {
                    typeName: "gameObject",
                    gameObjectClass: Player,
                    nullable: false,
                },
                currentTurn: {
                    typeName: "int",
                },
                gameObjects: {
                    typeName: "dictionary",
                    keyType: {
                        typeName: "string",
                    },
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: GameObject,
                        nullable: false,
                    },
                },
                healFactor: {
                    typeName: "float",
                },
                mapHeight: {
                    typeName: "int",
                },
                mapWidth: {
                    typeName: "int",
                },
                maxTurns: {
                    typeName: "int",
                },
                merchantGoldRate: {
                    typeName: "float",
                },
                merchantInterestRate: {
                    typeName: "float",
                },
                minInterestDistance: {
                    typeName: "float",
                },
                players: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: Player,
                        nullable: false,
                    },
                },
                ports: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: Port,
                        nullable: false,
                    },
                },
                restRange: {
                    typeName: "float",
                },
                session: {
                    typeName: "string",
                },
                shipCost: {
                    typeName: "int",
                },
                shipDamage: {
                    typeName: "int",
                },
                shipHealth: {
                    typeName: "int",
                },
                shipMoves: {
                    typeName: "int",
                },
                shipRange: {
                    typeName: "float",
                },
                tiles: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: Tile,
                        nullable: false,
                    },
                },
                timeAddedPerTurn: {
                    typeName: "int",
                },
                units: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: Unit,
                        nullable: false,
                    },
                },
            },
            functions: {
            },
        },
        GameObject: {
            attributes: {
                gameObjectName: {
                    typeName: "string",
                },
                id: {
                    typeName: "string",
                },
                logs: {
                    typeName: "list",
                    valueType: {
                        typeName: "string",
                    },
                },
            },
            functions: {
                log: {
                    args: [
                        {
                            argName: "message",
                            typeName: "string",
                        },
                    ],
                    returns: {
                        typeName: "void",
                    },
                },
            },
        },
        Player: {
            parentClassName: "GameObject",
            attributes: {
                clientType: {
                    typeName: "string",
                },
                gold: {
                    typeName: "int",
                },
                infamy: {
                    typeName: "int",
                },
                lost: {
                    typeName: "boolean",
                },
                name: {
                    typeName: "string",
                },
                opponent: {
                    typeName: "gameObject",
                    gameObjectClass: Player,
                    nullable: false,
                },
                port: {
                    typeName: "gameObject",
                    gameObjectClass: Port,
                    nullable: false,
                },
                reasonLost: {
                    typeName: "string",
                },
                reasonWon: {
                    typeName: "string",
                },
                timeRemaining: {
                    typeName: "float",
                },
                units: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: Unit,
                        nullable: false,
                    },
                },
                won: {
                    typeName: "boolean",
                },
            },
            functions: {
            },
        },
        Port: {
            parentClassName: "GameObject",
            attributes: {
                gold: {
                    typeName: "int",
                },
                investment: {
                    typeName: "int",
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: Player,
                    nullable: true,
                },
                tile: {
                    typeName: "gameObject",
                    gameObjectClass: Tile,
                    nullable: false,
                },
            },
            functions: {
                spawn: {
                    args: [
                        {
                            argName: "type",
                            typeName: "string",
                            defaultValue: "crew",
                            literals: ["crew", "ship"],
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
        Tile: {
            parentClassName: "GameObject",
            attributes: {
                decoration: {
                    typeName: "boolean",
                },
                gold: {
                    typeName: "int",
                },
                port: {
                    typeName: "gameObject",
                    gameObjectClass: Port,
                    nullable: true,
                },
                tileEast: {
                    typeName: "gameObject",
                    gameObjectClass: Tile,
                    nullable: true,
                },
                tileNorth: {
                    typeName: "gameObject",
                    gameObjectClass: Tile,
                    nullable: true,
                },
                tileSouth: {
                    typeName: "gameObject",
                    gameObjectClass: Tile,
                    nullable: true,
                },
                tileWest: {
                    typeName: "gameObject",
                    gameObjectClass: Tile,
                    nullable: true,
                },
                type: {
                    typeName: "string",
                    defaultValue: "water",
                    literals: ["water", "land"],
                },
                unit: {
                    typeName: "gameObject",
                    gameObjectClass: Unit,
                    nullable: true,
                },
                x: {
                    typeName: "int",
                },
                y: {
                    typeName: "int",
                },
            },
            functions: {
            },
        },
        Unit: {
            parentClassName: "GameObject",
            attributes: {
                acted: {
                    typeName: "boolean",
                },
                crew: {
                    typeName: "int",
                },
                crewHealth: {
                    typeName: "int",
                },
                gold: {
                    typeName: "int",
                },
                moves: {
                    typeName: "int",
                },
                owner: {
                    typeName: "gameObject",
                    gameObjectClass: Player,
                    nullable: true,
                },
                path: {
                    typeName: "list",
                    valueType: {
                        typeName: "gameObject",
                        gameObjectClass: Tile,
                        nullable: false,
                    },
                },
                shipHealth: {
                    typeName: "int",
                },
                stunTurns: {
                    typeName: "int",
                },
                targetPort: {
                    typeName: "gameObject",
                    gameObjectClass: Port,
                    nullable: true,
                },
                tile: {
                    typeName: "gameObject",
                    gameObjectClass: Tile,
                    nullable: true,
                },
            },
            functions: {
                attack: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: Tile,
                            nullable: false,
                        },
                        {
                            argName: "target",
                            typeName: "string",
                            defaultValue: "crew",
                            literals: ["crew", "ship"],
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                bury: {
                    args: [
                        {
                            argName: "amount",
                            typeName: "int",
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                deposit: {
                    args: [
                        {
                            argName: "amount",
                            typeName: "int",
                            defaultValue: 0,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                dig: {
                    args: [
                        {
                            argName: "amount",
                            typeName: "int",
                            defaultValue: 0,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                move: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: Tile,
                            nullable: false,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                rest: {
                    args: [
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                split: {
                    args: [
                        {
                            argName: "tile",
                            typeName: "gameObject",
                            gameObjectClass: Tile,
                            nullable: false,
                        },
                        {
                            argName: "amount",
                            typeName: "int",
                            defaultValue: 1,
                        },
                        {
                            argName: "gold",
                            typeName: "int",
                            defaultValue: 0,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
                withdraw: {
                    args: [
                        {
                            argName: "amount",
                            typeName: "int",
                            defaultValue: 0,
                        },
                    ],
                    invalidValue: false,
                    returns: {
                        typeName: "boolean",
                    },
                },
            },
        },
    },
});
